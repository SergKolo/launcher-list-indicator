#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# Author: Serg Kolo , contact: 1047481448@qq.com
# Date: August 22 , 2016
# Purpose: Indicator for Ubuntu Unity to set and keep
#          track of launcher icon lists
# Tested on: Ubuntu 16.04 LTS
#
# Icon by Zacharee1: http://askubuntu.com/users/274320/zacharee1
#
# Licensed under The MIT License (MIT).
# See included LICENSE file or the notice below.
#
# Copyright Â© 2016 Sergiy Kolodyazhnyy
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
import gi
gi.require_version('AppIndicator3', '0.1')
from gi.repository import GLib as glib
from gi.repository import AppIndicator3 as appindicator
from gi.repository import Gtk as gtk
from gi.repository import Gio
from collections import OrderedDict
import subprocess
import json
import time
import os

class LauncherListIndicator(object):

    def __init__(self):
        self.app = appindicator.Indicator.new(
            'mouse-profile-indicator', "",
            appindicator.IndicatorCategory.HARDWARE
            )

        self.app.set_status(appindicator.IndicatorStatus.ACTIVE)

        self.schema = 'com.canonical.Unity.Launcher'
        self.key = 'favorites'
        self.config_file = os.path.join(
            os.path.expanduser('~'),
            '.launcher_profiles.json'
            )
        self.make_menu()
        self.icon_path = os.path.dirname(os.path.realpath(__file__))
        self.app.set_icon(
            os.path.join(self.icon_path, "indicator-icon.png")
            )
        self.show_label = False
        self.update_label()

    def set_value(self, *args):
        """ wrapper function for gsettings_set() """
        self.gsettings_set(self.schema, None, self.key, args[-1])
        self.make_menu()

    def make_menu(self):
        """ generates entries in the indicator"""
        if hasattr(self, 'app_menu'):
            for item in self.app_menu.get_children():
                self.app_menu.remove(item)
        else:
            self.app_menu = gtk.Menu()

        profiles = None
        separator_added = None
        current_list = list(self.gsettings_get(self.schema,None,self.key))

        if os.path.isfile(self.config_file):
            with open(self.config_file) as conf_file:
                try:
                    profiles = json.load(conf_file)
                except ValueError:
                    pass
                else:
                    if profiles:
                        sorted_profiles = OrderedDict(sorted(profiles.items()))
                        for key, value in sorted_profiles.items():
                            if current_list == value:
                               key = u'\u2714 ' + key
                            self.menu_item = gtk.MenuItem(key)
                            self.menu_item.connect(
                                'activate', self.set_value, value)
                            self.app_menu.append(self.menu_item)
                            self.menu_item.show()

                        self.separator = gtk.SeparatorMenuItem()
                        self.app_menu.append(self.separator)
                        self.separator.show()
                        separator_added = True

                        self.remove_list = gtk.MenuItem('Remove entry')
                        self.remove_list.connect('activate', self.remove_entry)
                        self.app_menu.append(self.remove_list)
                        self.remove_list.show()

        if not separator_added:
            self.separator = gtk.SeparatorMenuItem()
            self.app_menu.append(self.separator)
            self.separator.show()
        self.record_profile = gtk.MenuItem('Save current')
        self.record_profile.connect('activate', self.record)
        self.app_menu.append(self.record_profile)
        self.app.set_secondary_activate_target(self.record_profile)
        self.record_profile.show()
 
        self.extras = gtk.MenuItem('Extras')
        self.extras_menu = gtk.Menu()
        self.extras.set_submenu(self.extras_menu)
        
 
        self.toggle_visible = gtk.MenuItem('Toggle visibility')
        self.toggle_visible.connect('activate', self.toggle_launcher)
        self.extras_menu.append(self.toggle_visible)
        self.toggle_visible.show()

        self.enable_label = gtk.MenuItem('Toggle label')
        self.enable_label.connect('activate',self.toggle_label)
        self.extras_menu.append(self.enable_label)
        self.enable_label.show()
        
        self.app_menu.append(self.extras)
        self.extras.show()

        self.quit_app = gtk.MenuItem('Quit')
        self.quit_app.connect('activate', self.quit)
        self.app_menu.append(self.quit_app)
        self.quit_app.show()

        self.app.set_menu(self.app_menu)
    
    def toggle_label(self,*args):
        """ Toggles label visibility"""
        if self.show_label:
           self.show_label = False
        else:
           self.show_label = True

    def toggle_launcher(self,*args):
        """ Toggles launcher visibility"""
        schema="org.compiz.unityshell" 
        key="launcher-hide-mode"
        path="/org/compiz/profiles/unity/plugins/unityshell/"
        if int(str(self.gsettings_get(schema,path,key))) == 1:
            self.gsettings_set(schema,path,key,0)
        else:
            self.gsettings_set(schema,path,key,1)

    def gsettings_get(self, schema, path, key):
        """Get value of gsettings schema"""
        if path is None:
            gsettings = Gio.Settings.new(schema)
        else:
            gsettings = Gio.Settings.new_with_path(schema, path)
        return gsettings.get_value(key)

    def gsettings_set(self, schema, path, key, value):
        """Set value of gsettings schema"""
        if path is None:
            gsettings = Gio.Settings.new(schema)
        else:
            gsettings = Gio.Settings.new_with_path(schema, path)
        if isinstance(value,list ):
            return gsettings.set_strv(key, value)
        if isinstance(value,int):
            return gsettings.set_int(key, value)

    def run(self):
        """ Launches the indicator """
        try:
            gtk.main()
        except KeyboardInterrupt:
            pass

    def record(self, data=None):
        """ Store current setting as new profile"""
        current_list = list(self.gsettings_get(self.schema, None, self.key))
        label = self.run_cmd([
                             'zenity', '--entry',
                             '--title=""', '--text="Name this profile"'
                             ])
        if not label:
            return None
        else:
            label = label.decode().strip()

        if os.path.isfile(self.config_file):
            # read data from file and append to it
            with open(self.config_file, 'r') as conf_file:
                data = json.load(conf_file)
                write_ok = True
                for key, value in data.items():
                    if label == key:
                        message = '"Label already exists"'
                        self.run_cmd([
                                     'zenity', '--error',
                                     '--title=""', '--text=' + message
                                     ])
                        write_ok = False

                    if value == current_list:
                        message = '"Profile with such value already exists"'
                        self.run_cmd([
                                     'zenity', '--error',
                                     '--title=""', '--text=' + message
                                     ])
                        write_ok = False

                data[label] = current_list
        else:
            # file doesn't exist, create it
            write_ok = True
            data = {label: current_list}
            # print(data)

        if write_ok:
            with open(self.config_file, 'w') as conf_file:
                json.dump(data, conf_file, indent=4, sort_keys=True)
            self.make_menu()

    def remove_entry(self, lists=None):
        """ deletes a list from config """
        entry = self.run_cmd([
                             'zenity', '--entry',
                             '--title=""', '--text="Which entry to remove?"'
                             ]).decode().strip()

        if os.path.isfile(self.config_file):
            found = False
            with open(self.config_file) as conf_file:
                lists = json.load(conf_file)
                for key in lists.keys():
                    if key == entry:
                        found = True

            if found:
                with open(self.config_file, 'w') as conf_file:
                    lists.pop(entry)
                    json.dump(lists, conf_file, indent=4, sort_keys=True)
                self.make_menu()

    def quit(self, data=None):
        """ closes indicator """
        gtk.main_quit()

    def run_cmd(self, cmdlist):
        """ Reusable function for running external commands """
        new_env = dict(os.environ)
        new_env['LC_ALL'] = 'C'
        try:
            stdout = subprocess.check_output(cmdlist, env=new_env)
        except subprocess.CalledProcessError:
            pass
        else:
            if stdout:
                return stdout

    def update_label(self):
        """ periodically alters indicator label
            to reflect current profile in use
        """
        value_found = False
        label = None
        self.app.set_label("","")
        if os.path.isfile(self.config_file):
            with open(self.config_file) as conf_file:
                current_value = list(
                    self.gsettings_get(self.schema, None, self.key))
                #self.app.set_label("N/A", "")
                profiles = json.load(conf_file)
                sorted_profiles = OrderedDict(sorted(profiles.items()))
                for key, value in sorted_profiles.items():
                    if value == current_value:
                       value_found = True
                       label = key

            if self.show_label:
                if not value_found: label = "N/A"
                self.app.set_label(label, "")
            if not value_found:  
                for item in self.app_menu.get_children():
                        entry_label = item.get_label()
                        if entry_label.startswith(u'\u2714 '):
                           item.set_label(entry_label.replace(u'\u2714 ',""))
              
        glib.timeout_add_seconds(0.75, self.callback)

    def callback(self):
        self.update_label()

    def get_next(self):
        pass 

def main():
    """ defines program entry point """
    indicator = LauncherListIndicator()
    indicator.run()

if __name__ == '__main__':
    main()
